1.prototype（原型（对象））
    1.1 是什么：能用作构造函数的函数(一般为普通的函数和内置的构造函数)都有的
               一个叫做prototype(原型)的属性，值为一个对象，故也称prototype为原型对象
    1.2 存在的目的：为了解决构造函数为每个对象创建的方法浪费内存的问题，以及--实现继承
    1.3 用于：将方法挂载在prototype上避免多次实例化
    1.4 原型上挂载的方法被调用时该方法的this指向调用该方法的实例对象

2.constructor属性
    2.1 是什么:作为原型的属性存在。但实例对象的__proto__指向原型,即也可视为间接存在于实例对象的__proto__中。
        其值即是其附着的原型所附着的构造函数。
    2.2 在对原型进行覆盖赋值时，要显示添加该属性并设置其指向对应构造函数

3.__proto__属性([[prototype]])
    3.1 是什么:作为所有对象的属性存在，值为一个对象(等同于其指向的对象)，只读
        3.1.1 作为实例对象的属性存在，指向其构造函数的原型(里的所挂载的公共方法)
        3.1.2 作为原型的属性存在，指向其构造函数的原型链上的父级原型

4.基于原型的继承实现方式:
    4.1 公共属性直接放在父类构造函数上（this.arg = arg），公共方法挂载到父类的原型中（Constructor.prototype.method）
    4.2 通过使用父类的构造函数(而不是固定的公共属性方法组成的一个静态父类对象)为子类的的原型赋值(覆盖性)，
        需要重新设置原型的constructor指回构造函数

5.原型链：由__proto__串起的，在一层一层原型上的，查找规则。
         (只有定义在原型上的方法和属性，才会通过原型链查找)